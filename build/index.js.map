{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,EAClB,YAAY,GAGb,MAAM,mBAAmB,CAAC;AAE3B,0EAA0E;AAC1E,wCAAwC;AACxC,OAAO,EAGL,WAAW,GACZ,MAAM,iBAAiB,CAAC;AACzB,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAE5C,MAAM,UAAU,WAAW;IACzB,OAAO,aAAa,CAAC,WAAW,EAAE,CAAC;AACrC,CAAC;AACD,MAAM,UAAU,UAAU;IACxB,OAAO,aAAa,CAAC,UAAU,EAAE,CAAC;AACpC,CAAC;AACD,MAAM,UAAU,YAAY;IAC1B,OAAO,aAAa,CAAC,YAAY,EAAE,CAAC;AACtC,CAAC;AACD,MAAM,UAAU,aAAa;IAC3B,OAAO,aAAa,CAAC,aAAa,EAAE,CAAC;AACvC,CAAC;AACD,MAAM,UAAU,4BAA4B;IAC1C,OAAO,aAAa,CAAC,4BAA4B,EAAE,CAAC;AACtD,CAAC;AACD,MAAM,UAAU,0BAA0B;IACxC,OAAO,aAAa,CAAC,0BAA0B,EAAE,CAAC;AACpD,CAAC;AAED,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,aAAa,IAAI,kBAAkB,CAAC,OAAO,CAAC,CAAC;AAE9E,MAAM,UAAU,wBAAwB,CAAC,QAAoB;IAC3D,OAAO,OAAO,CAAC,WAAW,CAAO,WAAW,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;AACxE,CAAC;AACD,MAAM,UAAU,sBAAsB,CAAC,QAAoB;IACzD,OAAO,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;AAChE,CAAC;AACD,MAAM,UAAU,4BAA4B,CAC1C,QAAoB;IAEpB,OAAO,OAAO,CAAC,WAAW,CAAO,WAAW,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;AAC5E,CAAC;AACD,MAAM,UAAU,yBAAyB,CACvC,QAAqD;IAErD,OAAO,OAAO,CAAC,WAAW,CACxB,WAAW,CAAC,cAAc,EAC1B,QAAQ,CACT,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,wBAAwB,CACtC,QAAoD;IAEpD,OAAO,OAAO,CAAC,WAAW,CACxB,WAAW,CAAC,aAAa,EACzB,QAAQ,CACT,CAAC;AACJ,CAAC;AAED,OAAO,EAAyD,WAAW,EAAE,CAAC","sourcesContent":["import {\n  NativeModulesProxy,\n  EventEmitter,\n  Subscription,\n  PermissionResponse,\n} from \"expo-modules-core\";\n\n// Import the native module. On web, it will be resolved to ExpoStt.web.ts\n// and on native platforms to ExpoStt.ts\nimport {\n  OnSpeechResultEventPayload,\n  OnSpeechErrorEventPayload,\n  ReactEvents,\n} from \"./ExpoStt.types\";\nimport ExpoSttModule from \"./ExpoSttModule\";\n\nexport function startSpeech(): boolean {\n  return ExpoSttModule.startSpeech();\n}\nexport function stopSpeech(): void {\n  return ExpoSttModule.stopSpeech();\n}\nexport function cancelSpeech(): void {\n  return ExpoSttModule.cancelSpeech();\n}\nexport function destroySpeech(): void {\n  return ExpoSttModule.destroySpeech();\n}\nexport function requestRecognitionPermission(): Promise<PermissionResponse> {\n  return ExpoSttModule.requestRecognitionPermission();\n}\nexport function checkRecognitionPermission(): Promise<PermissionResponse> {\n  return ExpoSttModule.checkRecognitionPermission();\n}\n\nconst emitter = new EventEmitter(ExpoSttModule ?? NativeModulesProxy.ExpoStt);\n\nexport function addOnSpeechStartListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(ReactEvents.onSpeechStart, listener);\n}\nexport function addOnSpeechEndListener(listener: () => void): Subscription {\n  return emitter.addListener(ReactEvents.onSpeechEnd, listener);\n}\nexport function addOnSpeechCancelledListener(\n  listener: () => void\n): Subscription {\n  return emitter.addListener<void>(ReactEvents.onSpeechCancelled, listener);\n}\nexport function addOnSpeechResultListener(\n  listener: (event: OnSpeechResultEventPayload) => void\n): Subscription {\n  return emitter.addListener<OnSpeechResultEventPayload>(\n    ReactEvents.onSpeechResult,\n    listener\n  );\n}\n\nexport function addOnSpeechErrorListener(\n  listener: (event: OnSpeechErrorEventPayload) => void\n): Subscription {\n  return emitter.addListener<OnSpeechErrorEventPayload>(\n    ReactEvents.onSpeechError,\n    listener\n  );\n}\n\nexport { OnSpeechResultEventPayload, OnSpeechErrorEventPayload, ReactEvents };\n"]}